minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
train_set %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
dec_fit <- glm_pre %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
fit_pred <- predict(dec_fit, test_set, type="class")
confusionMatrix(table(fit_pred, test_set$manhattan))
confusionMatrix(table(fit_pred, test_set$manhattan))$overall[["Accuracy"]]
dec_fit <- glm_pre %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
fit_pred <- predict(dec_fit, test_set, type="class")
confusionMatrix(table(fit_pred, test_set$manhattan))$overall[["Accuracy"]]
confusionMatrix(table(fit_pred, test_set$manhattan))
?confusionMatrix
dec_fit <- glm_pre %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
fit_pred <- predict(dec_fit, test_set, type="class")
confusionMatrix(table(fit_pred, test_set$manhattan))$overall[["Accuracy"]]
rpart.plot(dec_fit)
rpart.plot(dec_fit)
rpart.plot(dec_fit)
install.packages("e1071")
source('~/AirBnB_Science/AirBnB.R', echo=TRUE)
source('~/AirBnB_Science/AirBnB.R', echo=TRUE)
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=.)
forest_fit
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
knitr::opts_chunk$set(echo = TRUE)
glm_fit <- glm_pre %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ host_id +
room_type +
price +
minimum_nights +
number_of_reviews +
reviews_per_month +
calculated_host_listings_count +
availability_365
, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)
forest_fit
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
rafalib::mypar()
plot(forest_fit)
plot(forest_fit)
plot(forest_fit$err.rate)
plot(forest_fit$err.rate[1,])
plot(forest_fit$err.rate[,1])
plot(forest_fit) #$err.rate[,1]
forest_fit
?randomForest()
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=100)
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
rafalib::mypar()
plot(forest_fit) #$err.rate[,1]
forest_fit
forest_fit$err.rate
forest_fit$call
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=500)
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
forest_fit$call
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=500)
forest_p_hat <- predict(forest_fit, test_set)
forest_fit$type
forest_fit$predicted
forest_fit$confusion
forest_fit$votes
forest_fit$oob.times
forest_fit$forest
confusionMatrix(forest_p_hat, test_set$manhattan)$overall
confusionMatrix(forest_p_hat, test_set$manhattan)
plot(forest_fit) #$err.rate[,1]
plot(forest_fit$err.rate[,1:3])
plot(forest_fit) #$err.rate[,1]
rafalib::mypar()
plot(forest_fit) #$err.rate[,1]
forest_fit
plot(forest_fit$err.rate) #$err.rate[,1]
plot(forest_fit$err.rate[,1]) #$err.rate[,1]
plot(forest_fit$test$err.rate) #$err.rate[,1]
plot(forest_fit$test$mse) #$err.rate[,1]
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
glm_pre %>% filter(price >=96) %>% summarize(mean(manhattan))
glm_pre %>% filter(price >=96) %>% summarize(mean(manhattan=="manhattan"))
glm_pre %>% filter(!price >=96) %>% summarize(mean(manhattan=="manhattan"))
tmp <- train_set %>%
mutate(x = round(price, digits=-1)) %>%
group_by(x) %>%
filter(n() >= 5) %>%
summarize(prop = mean(manhattan == "manhattan"))
logistic_curve <- data.frame(x = seq(min(tmp$x), max(tmp$x))) %>%
mutate(p_hat = plogis(glm_fit$coef[1] + glm_fit$coef[2]*x))
tmp %>%
ggplot(aes(x, prop)) +
geom_point() +
geom_line(data = logistic_curve, mapping = aes(x, p_hat), lty = 2) +
xlab("price") +
ylab("proportion")
glm_fit <- glm_pre %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)$overall[["Accuracy"]]
tmp <- train_set %>%
mutate(x = round(price, digits=-1)) %>%
group_by(x) %>%
filter(n() >= 5) %>%
summarize(prop = mean(manhattan == "manhattan"))
logistic_curve <- data.frame(x = seq(min(tmp$x), max(tmp$x))) %>%
mutate(p_hat = plogis(glm_fit$coef[1] + glm_fit$coef[2]*x))
tmp %>%
ggplot(aes(x, prop)) +
geom_point() +
geom_line(data = logistic_curve, mapping = aes(x, p_hat), lty = 2) +
xlab("price") +
ylab("proportion")
glm_fit <- glm_pre %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)$overall[["Accuracy"]]
glm_pre %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), mrt=mean(room_type=="Entire home/apt")) %>%
mutate(mrt = round(mrt, digits=2)) %>%
ggplot(aes(price_round, mrt)) +
geom_point() +
geom_text(aes(label=mrt))
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=500)
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
rafalib::mypar()
plot(forest_fit$test$mse) #$err.rate[,1]
plot(forest_fit) #$err.rate[,1]
forest_fit
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=1000)
load(".RData")
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=1000)
library(tidyverse)
library(caret)
library(data.table)
library(e1071)
library(rpart)
library(rpart.plot)
library(randomForest)
library(rafalib)
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=1000)
source('~/AirBnB_Science/AirBnB.R', echo=TRUE)
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=1000)
forest_fit
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=500)
forest_fit
load(".RData")
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
library(tidyverse)
library(caret)
library(data.table)
library(e1071)
library(rpart)
library(rpart.plot)
library(randomForest)
library(rafalib)
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
knitr::opts_chunk$set(echo = TRUE)
AirData[is.na(AirData)] <- 0
AirData %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
ggplot(aes(price_round)) +
geom_histogram(bins = 20, fill = "#FF6666") +
scale_x_continuous(trans="log10")
quantile(AirData$price, probs=c(0.01, 0.10, 0.25, 0.50, 0.75, 0.90, 0.99))
AirData %>%
filter(price <= 26) %>%
group_by(price) %>%
arrange(price) %>%
summarize(n())
AirData <- AirData %>%
filter(price > 0 & price <= 1000)
AirData %>%
ggplot(aes(minimum_nights)) +
geom_histogram(bins = 20, fill = "#FF6666") +
scale_x_log10()
quantile(AirData$minimum_nights, probs=c(0.005, 0.10, 0.25, 0.50, 0.75, 0.90, 0.995))
AirData <- AirData %>%
filter(minimum_nights <= 100)
AirData %>%
ggplot(aes(calculated_host_listings_count)) +
geom_histogram(bins = 20, fill = "#FF6666") +
scale_x_log10()
AirData %>%
ggplot(aes(availability_365)) +
geom_histogram(bins = 20, fill = "#FF6666")
AirData %>%
group_by(number_of_reviews) %>%
ggplot(aes(number_of_reviews)) +
geom_histogram(bins = 20, fill = "#FF6666")
train_set %>%
ggplot(aes(longitude, latitude, col=neighbourhood_group)) +
geom_point()
train_set %>%
group_by(neighbourhood_group) %>%
summarize(offerings=n())
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean_price=mean(price), med_price=median(price))
train_set %>%
ggplot(aes(longitude, price, col=neighbourhood_group)) +
geom_point()
train_set_mprice <- train_set %>%
mutate(l=round(longitude, digits=2)) %>%
group_by(l) %>%
summarize(n=n(),
mprice=mean(price),
manh=mean(neighbourhood_group=="Manhattan")) %>%
filter(n>=10)
min_Manh_long <- min(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
max_Manh_long <- max(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set %>%
group_by(neighbourhood_group) %>%
summarize(room=mean(room_type=="Private room"),
apt=mean(room_type=="Entire home/apt"),
shared=mean(room_type=="Shared room"))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(room=mean(room_type=="Private room"),
apt=mean(room_type=="Entire home/apt"),
shared=mean(room_type=="Shared room")) %>%
gather(room_type, percent, room:shared) %>%
ggplot(aes(x=neighbourhood_group, y=percent, fill=room_type)) +
geom_bar(position = "fill", stat="identity")
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=mean(minimum_nights))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean(calculated_host_listings_count))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=round(mean(availability_365), digits=0))
#filter rounded price groupings with n()>=5
glm_pre <- train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
mutate(n=n()) %>%
filter(n>=5) %>%
ungroup() %>%
select(-price_round, -n)
glm_pre %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), proportion_manhattan=mean(neighbourhood_group=="Manhattan")) %>%
mutate(proportion_manhattan = round(proportion_manhattan, digits=2)) %>%
ggplot(aes(price_round, proportion_manhattan)) +
geom_point() +
geom_text(aes(label=proportion_manhattan))
glm_pre %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), mrt=mean(room_type=="Entire home/apt")) %>%
mutate(mrt = round(mrt, digits=2)) %>%
ggplot(aes(price_round, mrt)) +
geom_point() +
geom_text(aes(label=mrt))
glm_fit <- glm_pre %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ host_id +
room_type +
price +
minimum_nights +
number_of_reviews +
reviews_per_month +
calculated_host_listings_count +
availability_365
, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)
glm_fit <- glm_pre %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)$overall[["Accuracy"]]
tmp <- train_set %>%
mutate(x = round(price, digits=-1)) %>%
group_by(x) %>%
filter(n() >= 5) %>%
summarize(prop = mean(manhattan == "manhattan"))
logistic_curve <- data.frame(x = seq(min(tmp$x), max(tmp$x))) %>%
mutate(p_hat = plogis(glm_fit$coef[1] + glm_fit$coef[2]*x))
tmp %>%
ggplot(aes(x, prop)) +
geom_point() +
geom_line(data = logistic_curve, mapping = aes(x, p_hat), lty = 2) +
xlab("price") +
ylab("proportion")
dec_fit <- glm_pre %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
fit_pred <- predict(dec_fit, test_set, type="class")
confusionMatrix(table(fit_pred, test_set$manhattan))$overall[["Accuracy"]]
glm_pre %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=., ntree=500)
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
load(".RData")
