group_by(reviews_round) %>%
summarize(n())
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=-1)) %>%
group_by(reviews_round) %>%
summarize(n())
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=1)) %>%
group_by(reviews_round) %>%
summarize(n())
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=0)) %>%
group_by(reviews_round) %>%
summarize(n())
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=0)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666") +
scale_x_log10()
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=0)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666")
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=-1)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666")
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(reviews_per_month, digits=1)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666")
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(number_of_reviews, digits=1)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666")
#count of offers per reviews_per_month
AirData %>%
mutate(reviews_round = round(number_of_reviews, digits=0)) %>%
group_by(reviews_round) %>%
ggplot(aes(reviews_round)) +
geom_histogram(bins = 20, fill = "#FF6666")
#count of offers per reviews_per_month
AirData %>%
group_by(number_of_reviews) %>%
ggplot(aes(number_of_reviews)) +
geom_histogram(bins = 20, fill = "#FF6666")
AirData %>%
group_by(number_of_reviews) %>%
ggplot(aes(number_of_reviews)) +
geom_histogram(bins = 20, fill = "#FF6666")
AirData %>%
group_by(number_of_reviews) %>%
ggplot(aes(number_of_reviews)) +
geom_histogram(bins = 20, fill = "#FF6666")
train_set %>%
group_by(neighbourhood_group) %>%
summarize(room=mean(room_type=="Private room"),
apt=mean(room_type=="Entire home/apt"),
shared=mean(room_type=="Shared room")) %>%
gather(room_type, percent, room:shared) %>%
ggplot(aes(x=neighbourhood_group, y=percent, fill=room_type)) +
geom_bar(position = "fill", stat="identity")
#geographical ratings
train_set%>%
ggplot(aes(longitude, latitude, color=room_type)) +
geom_point()
#geographical ratings
train_set%>%
ggplot(aes(longitude, latitude, color=number_of_reviews)) +
geom_point()
#geographical ratings
train_set%>%
filter(number_of_reviews<100) %>%
ggplot(aes(longitude, latitude, color=number_of_reviews)) +
geom_point()
#geographical ratings
train_set%>%
filter(number_of_reviews<50) %>%
ggplot(aes(longitude, latitude, color=number_of_reviews)) +
geom_point()
#geographical ratings
train_set%>%
filter(number_of_reviews<50) %>%
ggplot(aes(longitude, latitude, color=number_of_reviews)) +
geom_point(alpha=0.3)
#geographical ratings
train_set%>%
filter(number_of_reviews<50) %>%
ggplot(aes(longitude, latitude, color=number_of_reviews)) +
geom_point(alpha=0.7)
AirData %>%
ggplot(aes(calculated_host_listings_count)) +
geom_histogram(bins = 20, fill = "#FF6666") +
scale_x_log10()
train_set %>%
group_by(neighbourhood_group) %>%
summarize(calculated_host_listings_count)
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean(calculated_host_listings_count))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=mean(minimum_nights))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean(calculated_host_listings_count))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean(calculated_host_listings_count))
#several observations on neighbourhood_groups
train_set %>%
group_by(neighbourhood_group) %>%
summarize(mean_price=mean(price),
med_rpice=median(price),
apt=mean(room_type=="Entire home/apt"),
room=mean(room_type=="Private room"),
shared=mean(room_type=="Shared room"),
min_nights=mean(minimum_nights),
calc_hlc=mean(calculated_host_listings_count),
ava=mean(availability_365),
# rev=mean(number_of_reviews)
)
#smoothing of average price by longitude (local weighted regression (loess)?)
train_set_mprice <- train_set %>%
mutate(l=round(longitude, digits=2)) %>%
group_by(l) %>%
summarize(n=n(),
mprice=mean(price),
manh=mean(neighbourhood_group=="Manhattan")) %>%
filter(n>=10)
min_Manh_long <- min(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
max_Manh_long <- max(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set_mprice %>%
ggplot(aes(col=manh)) +
geom_point(size=3) +
geom_smooth(l ~ mprice,
color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set_mprice %>%
ggplot(aes(col=manh)) +
geom_point(size=3) +
geom_smooth(aes(l ~ mprice),
color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set_mprice %>%
ggplot(aes(l ~ mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
train_set %>%
group_by(neighbourhood_group) %>%
summarize(room=mean(room_type=="Private room"),
apt=mean(room_type=="Entire home/apt"),
shared=mean(room_type=="Shared room"))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(room=mean(room_type=="Private room"),
apt=mean(room_type=="Entire home/apt"),
shared=mean(room_type=="Shared room")) %>%
gather(room_type, percent, room:shared) %>%
ggplot(aes(x=neighbourhood_group, y=percent, fill=room_type)) +
geom_bar(position = "fill", stat="identity")
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), mh=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mh)) +
geom_point() +
geom_text(aes(label=mh))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=mean(availability_365))
train_set %>%
group_by(neighbourhood_group) %>%
mutate(ava_round= round(availability_365, digits=0))
summarize(min_nights=mean(ava_round))
train_set %>%
mutate(ava_round= round(availability_365, digits=0)) %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=mean(ava_round))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=mean(round(availability_365, digits=0)))
train_set %>%
group_by(neighbourhood_group) %>%
summarize(min_nights=round(mean(availability_365), digits=0))
train_set %>%
ggplot(aes(longitude, latitude, color=availability_365)) +
geom_point(alpha=0.7)
train_set %>%
ggplot(aes(longitude, latitude, color=availability_365)) +
geom_point(alpha=0.5)
train_set %>%
ggplot(aes(longitude, latitude, color=availability_365)) +
geom_point(alpha=0.4)
train_set_mprice <- train_set %>%
mutate(l=round(longitude, digits=2)) %>%
group_by(l) %>%
summarize(n=n(),
mprice=mean(price),
manh=mean(neighbourhood_group=="Manhattan")) %>%
filter(n>=10)
min_Manh_long <- min(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
max_Manh_long <- max(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), mh=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mh)) +
geom_point() +
geom_text(aes(label=mh))
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), mrt=mean(room_type=="Entire home/apt")) %>%
mutate(mrt = round(mrt, digits=2)) %>%
#filter(!(mrt<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mrt)) +
geom_point() +
geom_text(aes(label=mrt))
#linear regression for categorical outcomes
#as we can see in the plot before there a few individual points where the price is >500 and the mean of manhattan is =0. So we will delete these for the training of the lm (logisitc?)
lm_fit <- train_set %>%
mutate(y = as.numeric(manhattan=="manhattan")) %>%
lm(y ~ price, data = .)
p_hat <- predict(lm_fit, test_set)
y_hat <- ifelse(p_hat>0.5, "manhattan", "not_manhattan") %>% factor()
confusionMatrix(y_hat, test_set$manhattan)#$overall["Accuracy"]
#logistic regression model
glm_fit <- train_set %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)#$overall[["Accuracy"]]
tmp <- train_set %>%
mutate(x = round(price, digits=-1)) %>%
group_by(x) %>%
filter(n() >= 10) %>%
summarize(prop = mean(manhattan == "manhattan"))
logistic_curve <- data.frame(x = seq(min(tmp$x), max(tmp$x))) %>%
mutate(p_hat = plogis(glm_fit$coef[1] + glm_fit$coef[2]*x))
tmp %>%
ggplot(aes(x, prop)) +
geom_point() +
geom_line(data = logistic_curve, mapping = aes(x, p_hat), lty = 2)
#smoothing of average price by longitude (local weighted regression)
train_set_mprice <- train_set %>%
mutate(l=round(longitude, digits=2)) %>%
group_by(l) %>%
summarize(n=n(),
mprice=mean(price),
manh=mean(neighbourhood_group=="Manhattan")) %>%
filter(n>=10)
min_Manh_long <- min(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
max_Manh_long <- max(train_set %>% filter(neighbourhood_group=="Manhattan") %>% select(longitude))
train_set_mprice %>%
ggplot(aes(l, mprice, col=manh)) +
geom_point(size=3) +
geom_smooth(color="orange",
span = 0.25,
method = "loess",
method.args = list(degree=1)) +
geom_vline(xintercept = min_Manh_long) +
geom_vline(xintercept = max_Manh_long)
#DECISION TREE
#(only using selected predictors for decision tree and random forest which are useful)
dec_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
rpart(manhattan ~ ., data=., model=TRUE)
fit_pred <- predict(dec_fit, test_set, type="class")
confusionMatrix(table(fit_pred, test_set$manhattan))
rpart.plot(dec_fit) ##???
train_set %>%
ggplot(aes(room_type, price, col=manhattan, size=calculated_host_listings_count)) +
geom_point(alpha=0.2)+
scale_y_continuous(trans="log2")
#RANDOM FORESTS
forest_fit <- train_set %>%
select(host_id,
room_type,
price,
minimum_nights,
number_of_reviews,
calculated_host_listings_count,
availability_365,
manhattan
) %>%
randomForest(manhattan ~ ., data=.)
forest_p_hat <- predict(forest_fit, test_set)
confusionMatrix(forest_p_hat, test_set$manhattan)#$overall["Accuracy"]
plot(forest_fit)
#optimize RF
nodesize <- seq(1, 51, 10)
acc <- sapply(nodesize, function(ns){
train(manhattan ~ host_id +
room_type +
price +
minimum_nights +
number_of_reviews +
calculated_host_listings_count +
availability_365, method = "rf", data = train_set,
tuneGrid = data.frame(mtry = 2),
nodesize = ns)$results$Accuracy
})
train_set %>%
ggplot(aes(longitude, latitude, color=availability_365)) +
geom_point(alpha=0.3)
train_set %>%
ggplot(aes(longitude, latitude, color=availability_365)) +
geom_point(alpha=0.3)
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), mh=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mh)) +
geom_point() +
geom_text(aes(label=mh))
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), proportion_manhattan=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, proportion_manhattan)) +
geom_point() +
geom_text(aes(label=mh))
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), mrt=mean(room_type=="Entire home/apt")) %>%
mutate(mrt = round(mrt, digits=2)) %>%
#filter(!(mrt<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mrt)) +
geom_point() +
geom_text(aes(label=mrt))
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), proportion_manhattan=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, proportion_manhattan)) +
geom_point() +
geom_text(aes(label=mh))
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), proportion_manhattan=mean(neighbourhood_group=="Manhattan")) %>%
mutate(mh = round(mh, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, proportion_manhattan)) +
geom_point() +
geom_text(aes(label=proportion_manhattan))
#ANALYSIS FOR LM
#Prices Manhattan Estimates in tens (-1) and hundreds (-2)
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n=n(), proportion_manhattan=mean(neighbourhood_group=="Manhattan")) %>%
mutate(proportion_manhattan = round(proportion_manhattan, digits=2)) %>%
#filter(!(mh<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, proportion_manhattan)) +
geom_point() +
geom_text(aes(label=proportion_manhattan))
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), mrt=mean(room_type=="Entire home/apt")) %>%
mutate(mrt = round(mrt, digits=2)) %>%
#filter(!(mrt<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, mrt)) +
geom_point() +
geom_text(aes(label=mrt))
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), home/apt=mean(room_type=="Entire home/apt")) %>%
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), home/apt=mean(room_type=="Entire home/apt")) %>%
train_set %>%
mutate(price_round = round(price, digits=-1)) %>%
group_by(price_round) %>%
summarize(n(), home_apt=mean(room_type=="Entire home/apt")) %>%
mutate(home_apt = round(home_apt, digits=2)) %>%
#filter(!(mrt<=0.5 & price_round>500)) %>%
ggplot(aes(price_round, home_apt)) +
geom_point() +
geom_text(aes(label=home_apt))
#linear regression for categorical outcomes
#as we can see in the plot before there a few individual points where the price is >500 and the mean of manhattan is =0. So we will delete these for the training of the lm (logisitc?)
lm_fit <- train_set %>%
mutate(y = as.numeric(manhattan=="manhattan")) %>%
lm(y ~ price, data = .)
p_hat <- predict(lm_fit, test_set)
y_hat <- ifelse(p_hat>0.5, "manhattan", "not_manhattan") %>% factor()
confusionMatrix(y_hat, test_set$manhattan)#$overall["Accuracy"]
#logistic regression model
glm_fit <- train_set %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)#$overall[["Accuracy"]]
tmp <- train_set %>%
mutate(x = round(price, digits=-1)) %>%
group_by(x) %>%
filter(n() >= 10) %>%
summarize(prop = mean(manhattan == "manhattan"))
logistic_curve <- data.frame(x = seq(min(tmp$x), max(tmp$x))) %>%
mutate(p_hat = plogis(glm_fit$coef[1] + glm_fit$coef[2]*x))
tmp %>%
ggplot(aes(x, prop)) +
geom_point() +
geom_line(data = logistic_curve, mapping = aes(x, p_hat), lty = 2)
#logistic regression model
glm_fit <- train_set %>%
mutate(y = as.numeric(manhattan == "manhattan")) %>%
filter(n() >= 10) %>%
glm(y ~ price, data=., family = "binomial")
p_hat_logit <- predict(glm_fit, newdata = test_set, type = "response")
y_hat_logit <- ifelse(p_hat_logit > 0.5, "manhattan", "not_manhattan") %>% factor
confusionMatrix(y_hat_logit, test_set$manhattan)#$overall[["Accuracy"]]
